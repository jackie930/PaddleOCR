[{"uri":"/01introduction.html","title":" 背景介绍: what is ocr","tags":[],"description":"","content":"OCR（光学字符识别） OCR（Optical Character Recognition）是指对文本资料的图像文件进行分析识别处理，获取文字及版面信息的过程。亦即将图像中的文字进行识别，并以文本的形式返回。\n"},{"uri":"/01introduction/100usecase.html","title":"使用场景","tags":[],"description":"","content":"使用场景 根据识别场景，可大致将OCR分为识别特定场景的专用OCR和识别多种场景的通用OCR.\n就前者而言，证件识别以及车牌识别就是专用OCR的典型案例。针对特定场景进行设计、优化以达到最好的特定场景下的效果展示。那通用的OCR就是使用在更多、更复杂的场景下，拥有比较好的泛性。在这个过程中由于场景的不确定性，比如：图片背景极其丰富、亮度不均衡、光照不均衡、残缺遮挡、文字扭曲、字体多样等等问题，会带来极大的挑战\n"},{"uri":"/01introduction/200ocrmodel.html","title":"ocr流程","tags":[],"description":"","content":"模型架构 一个完整的ocr流程，包含了不止一个深度学习模型，也不仅仅只是模型的串联。一般，我们会使用如下的步骤\n下面我们拆解一下每个步骤的内容。\n1.图像预处理 图像预处理通常是针对图像的成像问题进行修正。输入文本经过扫描仪进入计算机后，由于纸张的厚薄、光洁度和印刷质量都会造成文字畸变，产生断笔、粘连和污点等干扰，所以在进行文字识别之前，要对带有噪声的文字图像进行处理。由于这种处理工作是在文字识别之前，所以被称为预处理。预处理一般包括灰度化、二值化，几何变换（透视、扭曲、旋转等），畸变校正，去除模糊、图像增强和光线校正，行、字切分，平滑，规范化等等。\n2.文本检测 给定一张图片，我们需要找出这张图里文字出现的所有位置位置，那这个任务其实跟目标检测任务差别不大，即找出每个物体在图片中的位置，并标出该包围框里的物体的类别。\n3.文本识别 识别文字算法均采用CRNN（Convolutional Recurrent Neural Network）即卷积递归神经网络。其是DCNN和RNN的组合，专门用于识别图像中的序列式对象。与CTC loss配合使用，进行文字识别，可以直接从文本词级或行级的标注中学习，不需要详细的字符级的标注。\n4.后处理 表格识别/模版匹配/ner/规则矫正/…\n5. 结果输出 一般输出为json字段的key-value结果。\n"},{"uri":"/02test.html","title":"使用预训练模型测试","tags":[],"description":"","content":"本章节中，将会部署一个带有gpu机型的EC2环境，然后使用开源的预训练模型进行ocr任务的本地实践。\n"},{"uri":"/01introduction/300paddleocr.html","title":"ocr实现框架","tags":[],"description":"","content":"市场上开源的ocr框架有以下几个。\n Tesseract OCR 2.EasyOCR paddleocr  Tesseract OCR\nTesseract was originally developed at Hewlett-Packard Laboratories Bristol and at Hewlett-Packard Co, Greeley Colorado between 1985 and 1994, with some more changes made in 1996 to port to Windows, and some C++izing in 1998. In 2005 Tesseract was open sourced by HP. Since 2006 it is developed by Google.\nThe latest (LSTM based) stable version is 4.1.1, released on December 26, 2019.\nTesseract has unicode (UTF-8) support, and can recognize more than 100 languages \u0026ldquo;out of the box\u0026rdquo;.\nhttps://github.com/tesseract-ocr/tesseract\nEasyOCR(2021)\nReady-to-use OCR with 80+ supported languages and all popular writing scripts including Latin, Chinese, Arabic, Devanagari, Cyrillic and etc.\nhttps://github.com/JaidedAI/EasyOCR\npaddleocr\nAwesome multilingual OCR toolkits based on PaddlePaddle （practical ultra lightweight OCR system, provide data annotation and synthesis tools, support training and deployment among server, mobile, embedded and IoT devices）\nhttps://github.com/PaddlePaddle/PaddleOCR\n"},{"uri":"/03label.html","title":"标注工具","tags":[],"description":"","content":"#todo： owner-jiangfeng\n"},{"uri":"/04train.html","title":"模型训练","tags":[],"description":"","content":""},{"uri":"/02test/0201overview.html","title":"环境准备","tags":[],"description":"","content":"EC2 环境准备\n要完成本章节操作步骤，您需要准备一台EC2 实例：\nAMI : Deep Learning AMI (Ubuntu 18.04) Version 39.0 - ami-08773c85de0140def 实例类型： g4dn.xlarge （4C/16G） 存储: 150G\n构建环境\n#pull docker docker pull paddlepaddle/paddle:2.0.0rc1-gpu-cuda10.1-cudnn7 #attach  sudo nvidia-docker run --name ppocr2 -v $PWD:/paddle --shm-size=64G --network=host -it paddlepaddle/paddle:2.0.0rc1-gpu-cuda10.1-cudnn7 /bin/bash # Install PaddlePaddle Fluid v2.0 python3.7 -m pip install --upgrade pip # If you have cuda9 or cuda10 installed on your machine, please run the following command to install python3.7 -m pip install paddlepaddle-gpu==2.0rc1 # Recommend git clone https://github.com/jackie930/PaddleOCR.git cd PaddleOCR python3.7 -m pip install -r requirements.txt mkdir inference \u0026amp;\u0026amp; cd inference # Download the detection model of the ultra-lightweight Chinese OCR model and uncompress it wget https://paddleocr.bj.bcebos.com/dygraph_v2.0/ch/ch_ppocr_mobile_v2.0_det_infer.tar \u0026amp;\u0026amp; tar xf ch_ppocr_mobile_v2.0_det_infer.tar # Download the recognition model of the ultra-lightweight Chinese OCR model and uncompress it wget https://paddleocr.bj.bcebos.com/dygraph_v2.0/ch/ch_ppocr_mobile_v2.0_rec_infer.tar \u0026amp;\u0026amp; tar xf ch_ppocr_mobile_v2.0_rec_infer.tar # Download the angle classifier model of the ultra-lightweight Chinese OCR model and uncompress it wget https://paddleocr.bj.bcebos.com/dygraph_v2.0/ch/ch_ppocr_mobile_v2.0_cls_infer.tar \u0026amp;\u0026amp; tar xf ch_ppocr_mobile_v2.0_cls_infer.tar cd .. "},{"uri":"/02test/0210component.html","title":" 测试","tags":[],"description":"","content":"运行如下命令，可以测试一下使用开源预训练模型直接进行一个ocr推理的效果。\npython3.7 tools/infer/predict_system.py --image_dir=\u0026#34;./doc/imgs/11.jpg\u0026#34; --det_model_dir=\u0026#34;./inference/ch_ppocr_mobile_v2.0_det_infer/\u0026#34; --rec_model_dir=\u0026#34;./inference/ch_ppocr_mobile_v2.0_rec_infer/\u0026#34; --cls_model_dir=\u0026#34;./inference/ch_ppocr_mobile_v2.0_cls_infer/\u0026#34; --use_angle_cls=True --use_space_char=True "},{"uri":"/04train/0401prepare.html","title":"生成训练数据","tags":[],"description":"","content":"在ocr任务中，最大的挑战往往是如何获取足够多的标注数据。由于实际项目的限制，及标注成本，利用工具生成部分\u0026rsquo;fake\u0026rsquo;数据一般是ocr任务中会采用的策略。我们下面会介绍一下如何操作。\n使用trdq生成自定义语料/字体的训练数据 cd Sagemaker/gendata/ # install dependency pip install -r requirements.txt #run  python generate_data.py gen_data train data/test.txt font 手写数据生成 "},{"uri":"/","title":"AWS Datalab Hackathon - hands on OCR","tags":[],"description":"","content":"Author\nJUNYI LIU (AWS GCR Applied Scientist)\nJIANFENG LIU (AWS GCR FINANCE ISA)\n概述 本次分为几个部分\n 背景介绍- what is OCR？ 使用基于PaddleOCR的预训练模型测试一张ocr图片 使用标注工具 基于Amazon SageMaker的ocr模型训练动手实验 基于Amazon SageMaker的cr模型部署动手实验  本次 workshop 前提 本次 workshop 建议在 宁夏 Region 使用。为了演示方便，所以本 workshop 所有的演示都会以宁夏 Region 为例。\n"},{"uri":"/categories.html","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags.html","title":"Tags","tags":[],"description":"","content":""}]